Next: base32 invocation, Previous: nl invocation, Up: Output of entire files  
[Contents][Index]

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

3.4 od: Write files in octal or other formats

od writes an unambiguous representation of each file (‘-’ means standard
input), or standard input if none are given. Synopses:

od [option]… [file]…
od [-abcdfilosx]… [file] [[+]offset[.][b]]
od [option]… --traditional [file] [[+]offset[.][b] [[+]label[.][b]]]

Each line of output consists of the offset in the input, followed by groups of
data from the file. By default, od prints the offset in octal, and each group
of file data is a C short int’s worth of input printed as a single octal
number.

If offset is given, it specifies how many input bytes to skip before formatting
and writing. By default, it is interpreted as an octal number, but the optional
trailing decimal point causes it to be interpreted as decimal. If no decimal is
specified and the offset begins with ‘0x’ or ‘0X’ it is interpreted as a
hexadecimal number. If there is a trailing ‘b’, the number of bytes skipped
will be offset multiplied by 512.

If a command is of both the first and second forms, the second form is assumed
if the last operand begins with ‘+’ or (if there are two operands) a digit. For
example, in ‘od foo 10’ and ‘od +10’ the ‘10’ is an offset, whereas in ‘od 10’
the ‘10’ is a file name.

The program accepts the following options. Also see Common options.

‘-A radix’
‘--address-radix=radix’
   
    Select the base in which file offsets are printed. radix can be one of the
    following:

    ‘d’

        decimal;

    ‘o’

        octal;

    ‘x’

        hexadecimal;

    ‘n’

        none (do not print offsets).

    The default is octal.

‘--endian=order’
   
    Reorder input bytes, to handle inputs with differing byte orders, or to
    provide consistent output independent of the endian convention of the
    current system. Swapping is performed according to the specified --type
    size and endian order, which can be ‘little’ or ‘big’.

‘-j bytes’
‘--skip-bytes=bytes’
   
    Skip bytes input bytes before formatting and writing. If bytes begins with
    ‘0x’ or ‘0X’, it is interpreted in hexadecimal; otherwise, if it begins
    with ‘0’, in octal; otherwise, in decimal. bytes may be, or may be an
    integer optionally followed by, one of the following multiplicative
    suffixes:

    ‘b’  =>            512 ("blocks")
    ‘KB’ =>           1000 (KiloBytes)
    ‘K’  =>           1024 (KibiBytes)
    ‘MB’ =>      1000*1000 (MegaBytes)
    ‘M’  =>      1024*1024 (MebiBytes)
    ‘GB’ => 1000*1000*1000 (GigaBytes)
    ‘G’  => 1024*1024*1024 (GibiBytes)

    and so on for ‘T’, ‘P’, ‘E’, ‘Z’, and ‘Y’.

‘-N bytes’
‘--read-bytes=bytes’
   
    Output at most bytes bytes of the input. Prefixes and suffixes on bytes are
    interpreted as for the -j option.

‘-S bytes’
‘--strings[=bytes]’
   
    Instead of the normal output, output only string constants: at least bytes
    consecutive ASCII graphic characters, followed by a zero byte (ASCII NUL).
    Prefixes and suffixes on bytes are interpreted as for the -j option.

    If bytes is omitted with --strings, the default is 3.

‘-t type’
‘--format=type’
   
    Select the format in which to output the file data. type is a string of one
    or more of the below type indicator characters. If you include more than
    one type indicator character in a single type string, or use this option
    more than once, od writes one copy of each output line using each of the
    data types that you specified, in the order that you specified.

    Adding a trailing “z” to any type specification appends a display of the
    single byte character representation of the printable characters to the
    output line generated by the type specification.

    ‘a’

        named character, ignoring high-order bit

    ‘c’

        printable single byte character, C backslash escape or a 3 digit octal
        sequence

    ‘d’

        signed decimal

    ‘f’

        floating point (see Floating point)

    ‘o’

        octal

    ‘u’

        unsigned decimal

    ‘x’

        hexadecimal

    The type a outputs things like ‘sp’ for space, ‘nl’ for newline, and ‘nul’
    for a zero byte. Only the least significant seven bits of each byte is
    used; the high-order bit is ignored. Type c outputs ‘ ’, ‘\n’, and \0,
    respectively.

    Except for types ‘a’ and ‘c’, you can specify the number of bytes to use in
    interpreting each number in the given data type by following the type
    indicator character with a decimal integer. Alternately, you can specify
    the size of one of the C compiler’s built-in data types by following the
    type indicator character with one of the following characters. For integers
    (‘d’, ‘o’, ‘u’, ‘x’):

    ‘C’

        char

    ‘S’

        short

    ‘I’

        int

    ‘L’

        long

    For floating point (f):

    F 

        float

    D 

        double

    L 

        long double

‘-v’
‘--output-duplicates’
   
    Output consecutive lines that are identical. By default, when two or more
    consecutive output lines would be identical, od outputs only the first
    line, and puts just an asterisk on the following line to indicate the
    elision.

‘-w[n]’
‘--width[=n]’
   
    Dump n input bytes per output line. This must be a multiple of the least
    common multiple of the sizes associated with the specified output types.

    If this option is not given at all, the default is 16. If n is omitted, the
    default is 32.

The next several options are shorthands for format specifications. GNU od
accepts any combination of shorthands and format specification options. These
options accumulate.

‘-a’
   
    Output as named characters. Equivalent to ‘-t a’.

‘-b’
   
    Output as octal bytes. Equivalent to ‘-t o1’.

‘-c’
   
    Output as printable single byte characters, C backslash escapes or 3 digit
    octal sequences. Equivalent to ‘-t c’.

‘-d’
   
    Output as unsigned decimal two-byte units. Equivalent to ‘-t u2’.

‘-f’
   
    Output as floats. Equivalent to ‘-t fF’.

‘-i’
   
    Output as decimal ints. Equivalent to ‘-t dI’.

‘-l’
   
    Output as decimal long ints. Equivalent to ‘-t dL’.

‘-o’
   
    Output as octal two-byte units. Equivalent to -t o2.

‘-s’
   
    Output as decimal two-byte units. Equivalent to -t d2.

‘-x’
   
    Output as hexadecimal two-byte units. Equivalent to ‘-t x2’.

‘--traditional’
   
    Recognize the non-option label argument that traditional od accepted. The
    following syntax:

    od --traditional [file] [[+]offset[.][b] [[+]label[.][b]]]

    can be used to specify at most one file and optional arguments specifying
    an offset and a pseudo-start address, label. The label argument is
    interpreted just like offset, but it specifies an initial pseudo-address.
    The pseudo-addresses are displayed in parentheses following any normal
    address.

An exit status of zero indicates success, and a nonzero value indicates
failure.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Next: base32 invocation, Previous: nl invocation, Up: Output of entire files  
[Contents][Index]

